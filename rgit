#!/usr/bin/env perl

=head1 rgit - remote git script

Run simple git operations (diff/log/add/commit/...) from outside the working directory.

=head2 SYNOPSIS

Run git commands as if you were inside the working directory. This is useful
when you want to avoid changing directory all the time when working with
multiple repositories.

    cd /tmp
    rgit diff /home/d5ve/checkout1
    rgit add /home/d5ve/checkout1/*.pl
    rgit commit /home/d5ve/checkout1/

B<rgit> examines the commandline arguments, and tries to work out, then set the
I<GIT_WORK_TREE> and I<GIT_DIR> environmental variables from any file paths.

=head2 VERSION

Current version 0.04 - 2011-03-02

    Now filters out obvious flags and comments from directory tests.
    Now works when passed a commit message on the commandline.

Version 0.02 - 2010-09-02

    Now with some POD.

=cut

use strict;
use warnings;

our $VERSION = "0.004";
$VERSION = eval $VERSION;

use File::Spec;
use File::Basename;

chomp( my $git_cmd = `which git` );
my $git_work_tree;    # Directory holding the repo
my $git_dir;          # Directory holding the .git directory

# (1) Loop through args in reverse order, testing if any resemble a file path
# with a .git dir in it somewhere. Use this information to replace any relative
# paths with absolute ones, as well as record the GIT_WORK_TREE and GIT_DIR ENV
# variables.  as the GIT_WORK_TREE and GIT_DIR ENV variables.
foreach my $arg ( reverse @ARGV ) {

    # Skip if this arg looks like a git flag (-m etc.)
    next if $arg =~ m{\A - }xms;

    # Skip if this arg contains many spaces - it's probably a commit
    # message.
    next if $arg =~ m{ (\s.*?){4,} }xms;

    if ( my $gwt = get_git_work_tree($arg) ) {

        # Grab the first work tree found, and assume it's the only one
        $git_work_tree = File::Spec->rel2abs($gwt) unless $git_work_tree;

        # Replace any relative path with an absolute one
        $arg = File::Spec->rel2abs($arg);
    }
}
$git_dir = File::Spec->catdir( $git_work_tree, '.git' ) if $git_work_tree;

my $command;
if ( !$git_work_tree || $git_work_tree eq '.' ) {
    $command = "$git_cmd ";
}
else {
    $command = qq{GIT_WORK_TREE="$git_work_tree" GIT_DIR="$git_dir" $git_cmd };
}
foreach my $arg (@ARGV) {

    # If any single element in @ARGV contains spaces, then it must have been
    # quoted originally, so re-quote optimistically with "".
    # TODO - Maybe try to look at the string and see what sort of quoting was most
    # likely used.
    if ( $arg =~ m{ \s }xms ) {
        $command .= '"' . $arg . '"';
    }
    else {
        $command .= "$arg ";
    }
}

#print "COMMAND: $command\n";
exec $command;

exit;

sub get_git_work_tree {
    my $path = shift;

    my $last = '';
    while ( $path ne $last && $path ne '.' ) {
        if ( -d "$path/.git" ) {
            return $path;
        }
        $last = $path;
        $path = dirname($path);
    }
}

__END__

=head2 DESCRIPTION

B<rgit> was written to address an issue I had when moving from SVN to git. I
missed the ability to run operations on a checkout/repository from a directory
outside it.

For example, of the following commands, only the SVN one works:

    cd /tmp
    svn diff /home/d5ve/svncheckout/*.pl        # works as expected
    git diff /home/d5ve/gitcheckout/*.pl        # fails to work

Without doing any actual investigation, I think this may be because each
directory in an SVN checkout has a .svn directory, so when you run a SVN
command, which checkout is being referenced is gleaned from the file path. git,
however, has only a .git directory at the very top of the checkout. This means
that the only simple way to run git commands against a working directory is to
move into the working directory (or any subdirectory of the working directory).

You can use the I<GIT_WORK_TREE> and I<GIT_DIR> environmental variables to tell
git where the repository and .git directory are. B<rgit> attempts to work out
the correct value for these variables, then sets them before running the command.

All file paths are converted from relative to full.

=head2 INSTALLATION

Simply copy the B<rgit> script to a directory in your $PATH.

=head2 DEPENDENCIES

This module requires these other modules and libraries:

=over 4

=item * File::Spec

=item * File::Basename

=back

=head2 LICENCE

rgit is free software. It comes without any warranty, to the extent permitted
by applicable law.

rgit is released under the I<WTFPL Version 2.0> licence - L<http://sam.zoy.org/wtfpl/COPYING>

=cut
